@use "../../mixins/buttons";
@use "../../variables" as var;

/**
 * Expected button markup structure:
 *
 * <button class="button <button--icon-only|button--labeled> [button--compact] [button--primary] [is-active]">
 *   [<SvgIcon class="button__icon" />]
 *   [<span>label</span>]
 * </button>
 */
.button {
  @include buttons.button-base;
}

.button--labeled {
  @include buttons.button-basic;

  // Need a little space around the icon if a label is next to it
  .button__icon {
    margin: 0 5px;
  }
}

/* A button that sits right next to a (text) input and feels "at one" with it */
.button--input {
  @include buttons.button-basic;
  padding: 10px;
  border-radius: 0; // Turn off border-radius to align with <input> edges
  border: 1px solid var.$grey-3;
  border-left: 0px; // Avoid double border with the <input>
}

// In a few cases, it's necessary to squeeze buttons into tight spots
.button--compact {
  // e.g. in the top bar, need to have icons right next to each other
  &.button--icon-only {
    padding: 0.25em;
  }

  // e.g. when next to an input field in a small/tight component
  &.button--input {
    padding: 0.25em 0.5em;
  }

  // e.g. the "close" button for sidebar panels, other tighter spaces
  &.button--labeled {
    padding-right: 0.5em;
    padding-left: 0.5em;

    .button__icon {
      margin: 0;
    }
  }
}

.button--primary {
  @include buttons.button-primary;
}

@media (pointer: coarse) {
  .button {
    min-width: var.$touch-target-size;
    min-height: var.$touch-target-size;
  }

  // Until the top bar can be refactored to allow for breathing room around
  // the search interface, we can't spare the room for comfortable tap targets
  // on touchscreen devices. This overrides `Button`'s larger tap targets.
  .button--compact {
    min-width: auto;
    min-height: auto;
  }
}
